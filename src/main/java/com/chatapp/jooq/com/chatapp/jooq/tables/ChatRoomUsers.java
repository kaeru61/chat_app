/*
 * This file is generated by jOOQ.
 */
package com.chatapp.jooq.tables;


import com.chatapp.jooq.Keys;
import com.chatapp.jooq.Public;
import com.chatapp.jooq.tables.records.ChatRoomUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatRoomUsers extends TableImpl<ChatRoomUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chat_room_users</code>
     */
    public static final ChatRoomUsers CHAT_ROOM_USERS = new ChatRoomUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatRoomUsersRecord> getRecordType() {
        return ChatRoomUsersRecord.class;
    }

    /**
     * The column <code>public.chat_room_users.id</code>.
     */
    public final TableField<ChatRoomUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.chat_room_users.chat_room_id</code>.
     */
    public final TableField<ChatRoomUsersRecord, Integer> CHAT_ROOM_ID = createField(DSL.name("chat_room_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.chat_room_users.user_id</code>.
     */
    public final TableField<ChatRoomUsersRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.chat_room_users.created_at</code>.
     */
    public final TableField<ChatRoomUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ChatRoomUsers(Name alias, Table<ChatRoomUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatRoomUsers(Name alias, Table<ChatRoomUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chat_room_users</code> table reference
     */
    public ChatRoomUsers(String alias) {
        this(DSL.name(alias), CHAT_ROOM_USERS);
    }

    /**
     * Create an aliased <code>public.chat_room_users</code> table reference
     */
    public ChatRoomUsers(Name alias) {
        this(alias, CHAT_ROOM_USERS);
    }

    /**
     * Create a <code>public.chat_room_users</code> table reference
     */
    public ChatRoomUsers() {
        this(DSL.name("chat_room_users"), null);
    }

    public <O extends Record> ChatRoomUsers(Table<O> child, ForeignKey<O, ChatRoomUsersRecord> key) {
        super(child, key, CHAT_ROOM_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChatRoomUsersRecord, Integer> getIdentity() {
        return (Identity<ChatRoomUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatRoomUsersRecord> getPrimaryKey() {
        return Keys.CHAT_ROOM_USERS_PKEY;
    }

    @Override
    public List<ForeignKey<ChatRoomUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAT_ROOM_USERS__FK_CHAT_ROOM, Keys.CHAT_ROOM_USERS__FK_USER);
    }

    private transient ChatRooms _chatRooms;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.chat_rooms</code> table.
     */
    public ChatRooms chatRooms() {
        if (_chatRooms == null)
            _chatRooms = new ChatRooms(this, Keys.CHAT_ROOM_USERS__FK_CHAT_ROOM);

        return _chatRooms;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CHAT_ROOM_USERS__FK_USER);

        return _users;
    }

    @Override
    public ChatRoomUsers as(String alias) {
        return new ChatRoomUsers(DSL.name(alias), this);
    }

    @Override
    public ChatRoomUsers as(Name alias) {
        return new ChatRoomUsers(alias, this);
    }

    @Override
    public ChatRoomUsers as(Table<?> alias) {
        return new ChatRoomUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatRoomUsers rename(String name) {
        return new ChatRoomUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatRoomUsers rename(Name name) {
        return new ChatRoomUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatRoomUsers rename(Table<?> name) {
        return new ChatRoomUsers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, UUID, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
